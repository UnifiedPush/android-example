import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.plugin.compose'
}

android {
    compileSdk 35

    compileOptions {
        sourceCompatibility = 17
        targetCompatibility = 17
    }

    buildFeatures {
        compose true
    }

    defaultConfig {
        applicationId "org.unifiedpush.example"
        targetSdk 35
        minSdk 21
        versionCode 24
        versionName "2.0.0"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions = ["version"]
    productFlavors {
        mainFlavor {
            dimension "version"
        }

        fcm {
            dimension "version"
            versionNameSuffix "-fcm"
        }
    }

    namespace 'org.unifiedpush.example'
}

if (project.hasProperty('sign')) {
    android {
        signingConfigs {
            release {
                storeFile file(System.getenv("RELEASE_STORE_FILE"))
                storePassword System.getenv("RELEASE_STORE_PASSWORD")
                keyAlias System.getenv("RELEASE_KEY_ALIAS")
                keyPassword System.getenv("RELEASE_KEY_PASSWORD")
            }
        }
    }
    android.buildTypes.release.signingConfig android.signingConfigs.release
}

dependencies {
    ext.connector = 'org.unifiedpush.android:connector:3.0.0'
    ext.connector_ui = "org.unifiedpush.android:connector-ui:1.1.0"
    ext.embedded_distrib = 'org.unifiedpush.android:embedded-fcm-distributor:2.5.0'

    ext.uiTooling = "1.7.5"
    implementation "androidx.compose.material3:material3-android:1.3.1"
    implementation "androidx.compose.ui:ui-tooling-preview-android:$uiTooling"
    implementation "androidx.compose.ui:ui-tooling:$uiTooling"
    implementation "androidx.activity:activity-compose:1.9.3"
    implementation "com.google.accompanist:accompanist-permissions:0.36.0"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    mainFlavorImplementation 'androidx.appcompat:appcompat:1.7.0'
    fcmImplementation 'androidx.appcompat:appcompat:1.7.0'
    mainFlavorImplementation 'com.google.android.material:material:1.12.0'
    fcmImplementation 'com.google.android.material:material:1.12.0'
    implementation 'com.google.crypto.tink:apps-webpush:1.11.0'
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation "androidx.multidex:multidex:2.0.1"
    implementation "androidx.work:work-runtime:2.10.0"

    //Flavors
    implementation connector  //delToDevMain//
//toDevMain//    implementation project(':connector')
    implementation connector_ui  //delToDevUILib//
//toDevUILib//    implementation project(':connector_ui')

    fcmImplementation(embedded_distrib) {  //delToDevFcm//
        exclude group: 'com.google.firebase', module: 'firebase-core'  //delToDevFcm//
        exclude group: 'com.google.firebase', module: 'firebase-analytics'  //delToDevFcm//
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'  //delToDevFcm//
    }  //delToDevFcm//
//toDevFcm//    fcmImplementation  project(':distributor')
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    String flavor

    Pattern pattern

    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)")
    else
        pattern = Pattern.compile("generate(\\w+)")

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find() ) {
        flavor = matcher.group(1).toLowerCase()
    }
    else
    {
        println "NO MATCH FOUND"
        return ""
    }

    pattern = Pattern.compile("^fcm.*");
    matcher = pattern.matcher(flavor);

    if( matcher.matches() ) {
        return "fcm"
    } else {
        return "main"
    }
}

println("Flavor: ${getCurrentFlavor()}")
if ( getCurrentFlavor() == "fcm" ){
    apply plugin: 'com.google.gms.google-services'
}
